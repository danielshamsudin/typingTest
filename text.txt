don't
worry
about
what
anybody
else
is
going
to
do
the
best
way
to
predict
the
future
is
to
invent
it
premature
optimization
is
the
root
of
all
evil
(or
at
least
most
of
it)
in
programming
lisp
has
jokingly
been
called
"the
most
intelligent
way
to
misuse
a
computer"
i
think
that
description
is
a
great
compliment
because
it
transmits
the
full
flavor
of
liberation:
it
has
assisted
a
number
of
our
most
gifted
fellow
humans
in
thinking
previously
impossible
thoughts
keep
away
from
people
who
try
to
belittle
your
ambitions
small
people
always
do
that
but
the
really
great
make
you
feel
that
you
too
can
become
great
what
paul
does
and
does
very
well
is
to
take
ideas
and
concepts
that
are
beautiful
in
the
abstract
and
brings
them
down
to
a
real
world
level
that's
a
rare
talent
to
find
in
writing
these
days
since
programmers
create
programs
out
of
nothing
imagination
is
our
only
limitation
thus
in
the
world
of
programming
the
hero
is
the
one
who
has
great
vision
paul
graham
is
one
of
our
contemporary
heroes
he
has
the
ability
to
embrace
the
vision
and
to
express
it
plainly
his
works
are
my
favorites
especially
the
ones
describing
language
design
he
explains
secrets
of
programming
languages
and
human
nature
that
can
only
be
learned
from
the
hacker
experience
this
book
shows
you
his
great
vision
and
tells
you
the
truth
about
the
nature
of
hacking
to
follow
the
path:
look
to
the
master
follow
the
master
walk
with
the
master
see
through
the
master
become
the
master
no
problem
should
ever
have
to
be
solved
twice
attitude
is
no
substitute
for
competence
it
is
said
that
the
real
winner
is
the
one
who
lives
in
today
but
able
to
see
tomorrow
fools
ignore
complexity
pragmatists
suffer
it
some
can
avoid
it
geniuses
remove
it
a
year
spent
in
artificial
intelligence
is
enough
to
make
one
believe
in
god
dealing
with
failure
is
easy:
work
hard
to
improve
success
is
also
easy
to
handle:
you've
solved
the
wrong
problem
work
hard
to
improve
within
a
computer
natural
language
is
unnatural
you
think
you
know
when
you
learn
are
more
sure
when
you
can
write
even
more
when
you
can
teach
but
certain
when
you
can
program
adapting
old
programs
to
fit
new
machines
usually
means
adapting
new
machines
to
behave
like
old
ones
a
little
learning
is
a
dangerous
thing
computer
science
education
cannot
make
anybody
an
expert
programmer
any
more
than
studying
brushes
and
pigment
can
make
somebody
an
expert
painter
einstein
argued
that
there
must
be
simplified
explanations
of
nature
because
god
is
not
capricious
or
arbitrary
students
should
be
evaluated
on
how
well
they
can
achieve
the
goals
they
strived
to
achieve
within
a
realistic
context
students
need
to
learn
to
do
things
not
know
things
we
remember
what
we
learn
when
we
care
about
performing
better
and
when
we
believe
that
what
we
have
been
asked
to
do
is
representative
of
reality
there
really
is
no
learning
without
doing
we
really
have
to
get
over
the
idea
that
some
stuff
is
just
worth
knowing
even
if
you
never
do
anything
with
it
human
memories
happily
erase
stuff
that
has
no
purpose
so
why
try
to
fill
up
children's
heads
with
such
stuff?
the
only
problems
we
can
really
solve
in
a
satisfactory
manner
are
those
that
finally
admit
a
nicely
factored
solution
the
best
way
to
learn
to
live
with
our
limitations
is
to
know
them
this
challenge
viz
the
confrontation
with
the
programming
task
is
so
unique
that
this
novel
experience
can
teach
us
a
lot
about
ourselves
it
should
deepen
our
understanding
of
the
processes
of
design
and
creation
it
should
give
us
better
control
over
the
task
of
organizing
our
thoughts
if
it
did
not
do
so
to
my
taste
we
should
no
deserve
the
computer
at
all!
it
has
allready
taught
us
a
few
lessons
and
the
one
i
have
chosen
to
stress
in
this
talk
is
the
following
we
shall
do
a
